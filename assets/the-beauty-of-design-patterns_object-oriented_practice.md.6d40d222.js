import{_ as s,o as n,c as a,a as l,b as p,d as o,e,r as t}from"./app.21505a60.js";const c=JSON.parse('{"title":"实战","description":"","frontmatter":{},"headers":[{"level":2,"title":"常用的基于贫血模型的 MVC 架构违背 OPP 吗","slug":"常用的基于贫血模型的-mvc-架构违背-opp-吗","link":"#常用的基于贫血模型的-mvc-架构违背-opp-吗","children":[{"level":3,"title":"什么是基于贫血模型的传统开发模式","slug":"什么是基于贫血模型的传统开发模式","link":"#什么是基于贫血模型的传统开发模式","children":[]},{"level":3,"title":"什么是基于充血模型的 DDD 开发模式","slug":"什么是基于充血模型的-ddd-开发模式","link":"#什么是基于充血模型的-ddd-开发模式","children":[]},{"level":3,"title":"为什么基于贫血模型的传统开发模式如此受欢迎","slug":"为什么基于贫血模型的传统开发模式如此受欢迎","link":"#为什么基于贫血模型的传统开发模式如此受欢迎","children":[]},{"level":3,"title":"什么项目应该考虑使用基于充血模型的 DDD 开发模式","slug":"什么项目应该考虑使用基于充血模型的-ddd-开发模式","link":"#什么项目应该考虑使用基于充血模型的-ddd-开发模式","children":[]}]},{"level":2,"title":"利用基于充血模型的DDD开发一个虚拟钱包系统","slug":"利用基于充血模型的ddd开发一个虚拟钱包系统","link":"#利用基于充血模型的ddd开发一个虚拟钱包系统","children":[{"level":3,"title":"业务背景介绍","slug":"业务背景介绍","link":"#业务背景介绍","children":[]},{"level":3,"title":"设计思路","slug":"设计思路","link":"#设计思路","children":[]},{"level":3,"title":"基于贫血模型的传统开发模式","slug":"基于贫血模型的传统开发模式","link":"#基于贫血模型的传统开发模式","children":[]},{"level":3,"title":"基于充血模型的 DDD 开发模式","slug":"基于充血模型的-ddd-开发模式","link":"#基于充血模型的-ddd-开发模式","children":[]},{"level":3,"title":"辩证思考与灵活应用","slug":"辩证思考与灵活应用","link":"#辩证思考与灵活应用","children":[]}]},{"level":2,"title":"如何对接口鉴权这样一个功能开发做面向对象分析","slug":"如何对接口鉴权这样一个功能开发做面向对象分析","link":"#如何对接口鉴权这样一个功能开发做面向对象分析","children":[{"level":3,"title":"案例介绍和难点剖析","slug":"案例介绍和难点剖析","link":"#案例介绍和难点剖析","children":[]},{"level":3,"title":"对案例进行需求分析","slug":"对案例进行需求分析","link":"#对案例进行需求分析","children":[]},{"level":3,"title":"最终确定需求","slug":"最终确定需求","link":"#最终确定需求","children":[]}]},{"level":2,"title":"如何利用面向对象设计和编程开发接口鉴权功能","slug":"如何利用面向对象设计和编程开发接口鉴权功能","link":"#如何利用面向对象设计和编程开发接口鉴权功能","children":[]}],"relativePath":"the-beauty-of-design-patterns/object-oriented/practice.md"}'),r={name:"the-beauty-of-design-patterns/object-oriented/practice.md"},A=p("h1",{id:"实战",tabindex:"-1"},[o("实战 "),p("a",{class:"header-anchor",href:"#实战","aria-hidden":"true"},"#")],-1),D=e('<p>前面学习了面向对象的一些理论知识，比如，面向对象四大特性、接口和抽象类、面向对象和面向过程的编程风格、基于接口而非实现编程和多用组合少用继承设计思想等等。接下来，通过两个更加贴近项目的项目来进一步了解如何将它们应用到软件开发中。</p><h2 id="常用的基于贫血模型的-mvc-架构违背-opp-吗" tabindex="-1">常用的基于贫血模型的 MVC 架构违背 OPP 吗 <a class="header-anchor" href="#常用的基于贫血模型的-mvc-架构违背-opp-吗" aria-hidden="true">#</a></h2><p>虽然这种开发模式已经成为 Web 项目的标准开发模式，但是它却违背了面向对象的编程风格，属于面向过程编程。特别是领域驱动设计（Domain Driven Design，简称 DDD）盛行之后，这种开发模式更加被人诟病，基于充血模型的 DDD 开发模式越来越被人提倡。</p><h3 id="什么是基于贫血模型的传统开发模式" tabindex="-1">什么是基于贫血模型的传统开发模式 <a class="header-anchor" href="#什么是基于贫血模型的传统开发模式" aria-hidden="true">#</a></h3><h4 id="mvc-三层架构" tabindex="-1">MVC 三层架构 <a class="header-anchor" href="#mvc-三层架构" aria-hidden="true">#</a></h4><ul><li>M：表示 Model</li><li>V：表示 View</li><li>C：表示 Controller</li></ul><p>它将整个项目分为三层：表示层、逻辑层、数据层。它是一个笼统的分层方式，实际项目开发并不是 100% 遵从这种分层方式，会根据实际项目需求做相当调整。</p><p>比如，现在很多 Web 都是<strong>前后端分离</strong>的，后端给前端提供接口调用。一般将项目分为 Repository 层、Service 层、Controller 层。</p><ul><li>Repository：负责数据访问</li><li>Service：负责业务逻辑</li><li>Controller：负责暴露接口</li></ul><p>基本所有的 Web 项目都按照类似的思路进行分层。</p><h4 id="贫血模型" tabindex="-1">贫血模型 <a class="header-anchor" href="#贫血模型" aria-hidden="true">#</a></h4><p>结合一个例子来解释一下什么事贫血模型</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"></span>\n<span class="line"><span style="color:#676E95;">////////// Controller+VO(View Object) //////////</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">UserService</span><span style="color:#A6ACCD;"> userService</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//通过构造函数或者IOC框架注入</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">UserVo</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUserById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">userId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">UserBo</span><span style="color:#A6ACCD;"> userBo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> userService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getUserById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">userId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">UserVo</span><span style="color:#A6ACCD;"> userVo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[...</span><span style="color:#A6ACCD;">convert userBo to userVo</span><span style="color:#89DDFF;">...];</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> userVo</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserVo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">//省略其他属性、get/set/construct方法</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> cellphone</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">////////// Service+BO(Business Object) //////////</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">UserRepository</span><span style="color:#A6ACCD;"> userRepository</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//通过构造函数或者IOC框架注入</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">UserBo</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUserById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">userId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">UserEntity</span><span style="color:#A6ACCD;"> userEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> userRepository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getUserById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">userId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">UserBo</span><span style="color:#A6ACCD;"> userBo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[...</span><span style="color:#A6ACCD;">convert userEntity to userBo</span><span style="color:#89DDFF;">...];</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> userBo</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserBo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">//省略其他属性、get/set/construct方法</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> cellphone</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">////////// Repository+Entity //////////</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserRepository</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">UserEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUserById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">userId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//... }</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">//省略其他属性、get/set/construct方法</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> cellphone</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>从代码可以看出，UserBo 是一个纯粹的数据结构，只包含数据不包含业务逻辑，业务逻辑在 UserService 中。通过 UserService 来操作 UserBo。换句话说，Service 的数据和业务逻辑，被分割在 BO 和 Service 两个类中。</p><p>像 UserBo 这样，<strong>只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model）</strong>。同 UserEntity、UserVo 都是基于贫血模型设计的。</p><p>贫血模型将数据和操作分开，破坏了面向对象的封装特性，是一种典型的面向过程编程风格。</p><h3 id="什么是基于充血模型的-ddd-开发模式" tabindex="-1">什么是基于充血模型的 DDD 开发模式 <a class="header-anchor" href="#什么是基于充血模型的-ddd-开发模式" aria-hidden="true">#</a></h3><h4 id="先看一下什么是充血模型" tabindex="-1">先看一下什么是充血模型 <a class="header-anchor" href="#先看一下什么是充血模型" aria-hidden="true">#</a></h4><ul><li>贫血模型：数据和业务逻辑被分割到不同类中</li><li>充血模型：正好相反，数据和业务逻辑被封装到同一个类中</li></ul><h4 id="再看一下什么事领域驱动设计-ddd" tabindex="-1">再看一下什么事领域驱动设计 DDD <a class="header-anchor" href="#再看一下什么事领域驱动设计-ddd" aria-hidden="true">#</a></h4><ul><li>作用：领域驱动设计（DDD）<strong>主要用来指导如何解耦业务系统，划分业务模块，定义业务领域及其交互的</strong>。</li><li>关键：<strong>做好领域驱动设计的关键是，看你自己对所做的业务的熟悉程度，而并不是对领域设计这个概念本身的掌握程度</strong>。即便你把领域驱动搞得再清楚，但是对业务不熟悉，也不一定能做出合理的领域设计。所以领域驱动并不是银弹。</li><li>区别：基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain。</li></ul><p>基于充血模型的 DDD 开发模式实现的代码，也是按照 MVC 三层架构分层，它跟基于贫血模型的传统的开发模式<strong>区别主要在 Service 层</strong>。</p><p>基于贫血模型的传统开发模式：<strong>Service 层包含 Service 类和 BO 类两部分</strong>，BO 是贫血模型，只包含数据不包含具体的业务逻辑，业务逻辑集中在 Service 类。</p><p>基于充血模型的 DDD 开发模式：<strong>Service 包含 Service 和 Domain 类两部分</strong>，Domain 相当于 BO，不过，Domain 是基于充血模型开发的，即包含数据也包含业务逻辑，这时 Service 类就变得很单薄。</p><h3 id="为什么基于贫血模型的传统开发模式如此受欢迎" tabindex="-1">为什么基于贫血模型的传统开发模式如此受欢迎 <a class="header-anchor" href="#为什么基于贫血模型的传统开发模式如此受欢迎" aria-hidden="true">#</a></h3><p>几乎所有的 Web 项目都是基于这种贫血模型的开发模式。前面介绍过，面向过程存在的种种弊端，比如，数据和操作分离，数据本身的操作就不受限制，任何代码都可以修改。</p><p>为什么面向过程风格的基于贫血模型的开发模式还这么受欢迎？</p><p>主要有三个原因：</p><ul><li>大部分情况我们业务都比较简单，贫血模型就可以满足。 <ul><li>可能简单到就是基于 SQL 的 CRUD 操作，不需要精心设计充血模型，贫血模型足以满足这种简单的业务开发工作。</li><li>另外，在业务简单的情况下，即便我们设计了充血模型，那模型本身包含的业务并不多，设计出来的领域模型也会比较单薄，跟贫血模型差不多，没有太多意义。</li></ul></li><li>设计充血模型比贫血模型更有难度。因为充血模型是一种面向对象的编程风格，一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑。而不是像贫血模型那样，只需定义好数据，之后有功能需求，就在 Service 层定义什么操作，不需要太多事先设计。</li><li>思维已经固化，转型有成本。贫血模型经历了很多年，已经深入人心，习以为常。如果转向充血模型、领域驱动设计，势必有一定的学习成本，没有遇到痛点的时候不愿意做这件事。</li></ul><h3 id="什么项目应该考虑使用基于充血模型的-ddd-开发模式" tabindex="-1">什么项目应该考虑使用基于充血模型的 DDD 开发模式 <a class="header-anchor" href="#什么项目应该考虑使用基于充血模型的-ddd-开发模式" aria-hidden="true">#</a></h3><p>前面讲到，业务简单用基于贫血模型的传统开发模型就可以。相对应的，<strong>基于充血模型的 DDD 开发模式，更适合业务复杂的系统开发</strong>。比如，包含各种利息计算模型、还款模型等复杂业务的金融系统。</p><p><strong>基于充血模型的 DDD 开发模式真正优势是开发流程</strong>。</p><p>前面讲到这两种模式区别落实到代码上是，一个将业务逻辑放到 Service，一个放到 Domain 领域模型中。除了这个区别之外，还有一个非常重要的区别，<strong>那就是两种不同的开发模式会导致不同的开发流程</strong>。基于充血模型的 DDD 开发模式的开发流程，在应对复杂业务系统的开发的时候更加有优势。</p><p>不夸张的说我们平时的开发是 SQL 驱动（SQL-Driven）的开发模式。</p><p>一般流程是，接到一个接口的开发需求，就去看接口需要的数据对应到数据库中需要哪些表，然后思考如何编写 SQL 语句来获取数据。之后就是定义 Entity、BO、VO，然后模板式地往对应的 Repository、Service、Controller 类中添加代码。</p><p>业务逻辑实际是包裹在一个大的 SQL 中，而 Service 做的很少。SQL 是针对特定的业务功能编写的，复用性很差。开发另外的功能时，只能重新写一个满足新需求的 SQL。最后导致很多区别很小的 SQL 语句满天飞。</p><p>对于简单的业务系统，这种开发方式问题不大。但是对于复杂系统，这种方式会让代码越来越混乱，最终导致无法维护。</p><p>基于充血模型的 DDD 开发模式流程完全不一样。</p><p>我们需要<strong>先理清楚所有的业务，定义领域领域模型包含的属性和方法。领域模型相当于可复用的业务中间层。新功能的开发，都基于之前定义好的这些领域模型来完成</strong>。</p>',39),C=e('<h2 id="利用基于充血模型的ddd开发一个虚拟钱包系统" tabindex="-1">利用基于充血模型的DDD开发一个虚拟钱包系统 <a class="header-anchor" href="#利用基于充血模型的ddd开发一个虚拟钱包系统" aria-hidden="true">#</a></h2><h3 id="业务背景介绍" tabindex="-1">业务背景介绍 <a class="header-anchor" href="#业务背景介绍" aria-hidden="true">#</a></h3><p>很多具有支付、购买功能的应用（淘宝、滴滴、极客时间）都支持钱包的功能。其中为每个用户开设一个系统内的虚拟钱包，支持用户充值、提现、支付、冻结、查询账户余额、查询交易流水等。一般来讲，每个虚拟钱包都会对应用户的一个真实支付账户，可能是银行卡账号，也可能是三方支付账户（支付宝、微信钱包）。</p><p>为了方便讲解，限定钱包暂时只支持充值、提现、支付、查询余额、查询交易流水这五个核心的功能。</p><ol><li>充值：用户通过三方支付渠道，把自己银行卡账户内的钱，充值到虚拟钱包账号中。</li><li>支付：用户用钱包内的余额，支付购买应用内的商品。</li><li>提现：将虚拟钱包中的余额，提现到自己的银行卡中。</li><li>查询余额：查询虚拟钱包中的余额数字。</li><li>查询交易流水：在用户充值、支付、提现的时候，我们会记录相应的交易信息，查询时将之前记录的交易流水，按照时间、类型等条件过滤之后，显示出来即可。</li></ol><p><img src="/reading-notes/assets/object-oriented-wallet.d0eb8081.png" alt="钱包"></p><h3 id="设计思路" tabindex="-1">设计思路 <a class="header-anchor" href="#设计思路" aria-hidden="true">#</a></h3><p>根据前面的业务流程，可以把整个钱包系统的业务划分为两部分：</p><ul><li>一部分单纯跟应用内的虚拟钱包账户打交道</li><li>另一部分单纯跟银行账户打交单</li></ul><p>基于这个业务划分，给系统解耦，将整个钱包系统拆分成两个子系统：虚拟钱包系统和三方支付系统。</p><p>接下来聚焦于虚拟钱包系统的设计和实现。</p><p>我们来看下，<strong>如果要支持钱包的这五个核心功能，虚拟钱包系统需要对应实现哪些操作</strong>。</p><table><thead><tr><th>钱包</th><th>虚拟钱包</th></tr></thead><tbody><tr><td>充值</td><td>+ 余额</td></tr><tr><td>提现</td><td>- 余额</td></tr><tr><td>支付</td><td>+- 余额（一个账户减余额，另一个账户加余额）</td></tr><tr><td>查询余额</td><td>查询余额</td></tr><tr><td>查询交易流水</td><td>-</td></tr></tbody></table><p>具体看一下查询交易流水，也就是交易流水如何记录和查询？首先交易流水一般必须包含几个信息：</p><table><thead><tr><th>交易流水 ID</th><th>交易时间</th><th>交易余额</th><th>交易类型</th><th>入账钱包账号</th><th>出账钱包账号</th></tr></thead></table><p>交易类型包括：充值、提现、支付。为了兼容支付这种涉及两个账号的交易类型，钱包账号区分出入。</p><p>接下来看一下如何分别设计实现这样一个虚拟钱包。</p><h3 id="基于贫血模型的传统开发模式" tabindex="-1">基于贫血模型的传统开发模式 <a class="header-anchor" href="#基于贫血模型的传统开发模式" aria-hidden="true">#</a></h3><p>这是一个典型的 Web 后端项目的三层结构。</p><ul><li>Controller 层</li></ul><p>Controller 和 VO 负责暴露接口。接口实现比较简单，主要就是调用 Service 的方法。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VirtualWalletController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 通过构造函数或者IOC框架注入</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">VirtualWalletService</span><span style="color:#A6ACCD;"> virtualWalletService</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBalance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//查询余额</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//出账</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">credit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//入账</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">fromWalletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">toWalletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//转账</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//省略查询transaction的接口</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>Service 层</li></ul><p>Service 和 BO 负责核心业务逻辑。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VirtualWalletBo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">//省略getter/setter/constructor方法</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> createTime</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> balance</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Enum</span><span style="color:#A6ACCD;"> TransactionType </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  DEBIT</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  CREDIT</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  TRANSFER</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VirtualWalletService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 通过构造函数或者IOC框架注入</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">VirtualWalletRepository</span><span style="color:#A6ACCD;"> walletRepo</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">VirtualWalletTransactionRepository</span><span style="color:#A6ACCD;"> transactionRepo</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">VirtualWalletBo</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getVirtualWallet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWalletEntity</span><span style="color:#A6ACCD;"> walletEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> walletRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWalletEntity</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWalletBo</span><span style="color:#A6ACCD;"> walletBo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletEntity</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> walletBo</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 查询余额</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBalance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> walletRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBalance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 提现</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWalletEntity</span><span style="color:#A6ACCD;"> walletEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> walletRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWalletEntity</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> balance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> walletEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBalance</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">balance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compareTo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NoSufficientBalanceException</span><span style="color:#89DDFF;">(...);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 记录交易</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWalletTransactionEntity</span><span style="color:#A6ACCD;"> transactionEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VirtualWalletTransactionEntity</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"><span style="color:#A6ACCD;">    transactionEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAmount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    transactionEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCreateTime</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentTimeMillis</span><span style="color:#89DDFF;">());</span></span>\n<span class="line"><span style="color:#A6ACCD;">    transactionEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setType</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">TransactionType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DEBIT</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    transactionEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setFromWalletId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    transactionRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">saveTransaction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">transactionEntity</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 操作钱包</span></span>\n<span class="line"><span style="color:#A6ACCD;">    walletRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateBalance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> balance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subtract</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 充值</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">credit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">//...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 支付</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">fromWalletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">toWalletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWalletTransactionEntity</span><span style="color:#A6ACCD;"> transactionEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VirtualWalletTransactionEntity</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"><span style="color:#A6ACCD;">    transactionEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAmount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">debit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fromWalletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> amount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">credit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">toWalletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> amount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><ul><li>Repository 层</li></ul><p>Repository 和 Entity 负责数据存取。层的代码实现比较简单，不是重点，省略。</p><h3 id="基于充血模型的-ddd-开发模式" tabindex="-1">基于充血模型的 DDD 开发模式 <a class="header-anchor" href="#基于充血模型的-ddd-开发模式" aria-hidden="true">#</a></h3><p>基于充血模型的 DDD 开发模式，跟基于贫血模型的传统开发模式的主要区别就在 Service 层，Controller 层和 Repository 层的代码基本上相同。所以我们重点看 Service 层，基于充血模型的 DDD 开发模式该如何实现。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Domain领域模型(充血模型)</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VirtualWallet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> createTime </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentTimeMillis</span><span style="color:#89DDFF;">();;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> balance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> BigDecimal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ZERO</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VirtualWallet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">preAllocatedId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> preAllocatedId</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">balance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">balance</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 包含业务逻辑了</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">balance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compareTo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InsufficientBalanceException</span><span style="color:#89DDFF;">(...);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">balance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">balance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subtract</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">credit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compareTo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">BigDecimal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ZERO</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InvalidAmountException</span><span style="color:#89DDFF;">(...);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">balance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">balance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VirtualWalletService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 通过构造函数或者IOC框架注入</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">VirtualWalletRepository</span><span style="color:#A6ACCD;"> walletRepo</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">VirtualWalletTransactionRepository</span><span style="color:#A6ACCD;"> transactionRepo</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">VirtualWallet</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getVirtualWallet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWalletEntity</span><span style="color:#A6ACCD;"> walletEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> walletRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWalletEntity</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWallet</span><span style="color:#A6ACCD;"> wallet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletEntity</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> wallet</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBalance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> walletRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBalance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWalletEntity</span><span style="color:#A6ACCD;"> walletEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> walletRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWalletEntity</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWallet</span><span style="color:#A6ACCD;"> wallet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletEntity</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    wallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">VirtualWalletTransactionEntity</span><span style="color:#A6ACCD;"> transactionEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VirtualWalletTransactionEntity</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"><span style="color:#A6ACCD;">    transactionEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAmount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">    walletRepo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateBalance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> wallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">balance</span><span style="color:#89DDFF;">());</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">credit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">walletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">fromWalletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">toWalletId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 跟基于贫血模型的传统开发模式的代码一样...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div>',30),y=e('<p><strong>现在领域模型 VirtualWallet 类很单薄，包含的业务逻辑很简单</strong>。相对于原来的贫血模型的设计思路，这种充血模型的设计思路，貌似并没有太大优势。没错！这也是大部分业务系统都使用基于贫血模型开发的原因。</p><p>不过如果虚拟钱包支持更复杂的业务逻辑，充血模型的优势就出来了。比如，我们要支持透支一定额度和冻结部分余额的功能，这个时候再看一下 VirtualWallet 类：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VirtualWallet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> createTime </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentTimeMillis</span><span style="color:#89DDFF;">();;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> balance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> BigDecimal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ZERO</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> isAllowedOverdraft </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> overdraftAmount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> BigDecimal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ZERO</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> frozenAmount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> BigDecimal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ZERO</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VirtualWallet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">preAllocatedId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> preAllocatedId</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">freeze</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unfreeze</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increaseOverdraftAmount</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">decreaseOverdraftAmount</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">closeOverdraft</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">openOverdraft</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">balance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">balance</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getAvaliableBalance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> totalAvaliableBalance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">balance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subtract</span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">frozenAmount</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">isAllowedOverdraft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      totalAvaliableBalance </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">overdraftAmount</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> totalAvaliableBalance</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">credit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BigDecimal</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">amount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>领域模型 VirtualWallet 现在看起来丰富很多了。VirtualWallet 类的业务逻辑会变得越来越复杂，也就很值得设计成充血模型了。</p><h3 id="辩证思考与灵活应用" tabindex="-1">辩证思考与灵活应用 <a class="header-anchor" href="#辩证思考与灵活应用" aria-hidden="true">#</a></h3><p>接下来还有两个问题值得探讨。</p><h4 id="service-的作用是什么" tabindex="-1">Service 的作用是什么 <a class="header-anchor" href="#service-的作用是什么" aria-hidden="true">#</a></h4><p>在基于充血模型的 DDD 开发模式中，将业务逻辑移动到 Domain 中，Service 类变得很薄，但在我们的代码设计与实现中，并没有完全将 Service 类去掉，这是为什么？或者说，Service 类在这种情况下担当的职责是什么？哪些功能逻辑会放到 Service 类中？</p><p>区别于 Domain 的职责，Service 类主要有下面这样几个职责：</p><ul><li><p>Service 类负责与 Repository 交流。</p><ul><li>它调用 Respository 类的方法，获取数据库中的数据，转化成领域模型 VirtualWallet，然后由领域模型 VirtualWallet 来完成业务逻辑，最后调用 Repository 类的方法，将数据存回数据库。</li><li>之所以这样做是，我们想<strong>保持领域模型的独立性</strong>，不与任何其他层代码（Repository）或开发框架（如 Spring）耦合在一起，将流程性的代码逻辑（从 DB 读数据等）和领域模型的业务逻辑解耦，让领域模型更加可复用。</li></ul></li><li><p>Service 类负责跨领域模型的业务聚合功能。VirtualWalletService 类中的 transfer() 转账函数会涉及两个钱包的操作，因此这部分业务逻辑无法放到 VirtualWallet 类中，所以，我们暂且把转账业务放到 VirtualWalletService 类中了。当然，随着功能演进，我们也可以将转账业务抽取出来，设计成一个独立的领域模型。</p></li><li><p>Service 类负责一些非功能性及与三方系统交互的工作。比如发消息、记录日志、调用其他系统的 RPC 接口等，都可以放到 Service 类中。</p></li></ul><h4 id="controller-层和-repository-需要变成充血模型吗" tabindex="-1">Controller 层和 Repository 需要变成充血模型吗 <a class="header-anchor" href="#controller-层和-repository-需要变成充血模型吗" aria-hidden="true">#</a></h4><p>在基于充血模型的 DDD 开发模式中，尽管 Service 层被改造成了充血模型，但是 Controller 层和 Repository 层还是贫血模型，是否有必要也进行充血领域建模呢？</p><p>答案是没有必要。Controller 层主要负责接口的暴露，Repository 层主要负责与数据库打交道，这两层包含的业务逻辑并不多。业务逻辑比较简单，就没有做充血模型。即便做了，也很担保单薄，看起来也很奇怪。</p><h2 id="如何对接口鉴权这样一个功能开发做面向对象分析" tabindex="-1">如何对接口鉴权这样一个功能开发做面向对象分析 <a class="header-anchor" href="#如何对接口鉴权这样一个功能开发做面向对象分析" aria-hidden="true">#</a></h2><p>面向对象分析（OOA）、面向对象设计（OOD）、面向对象（OOA）是面向对象开发的三个环节。接下来结合实际案例，从基础的需求分析、职责划分、类的定义、交互、组装运行讲起，理解这三个过程。</p><h3 id="案例介绍和难点剖析" tabindex="-1">案例介绍和难点剖析 <a class="header-anchor" href="#案例介绍和难点剖析" aria-hidden="true">#</a></h3><p>假设，你正在参与开发一个微服务，微服务通过 HTTP 协议暴露接口给其他系统调用。有天你 leader 找你说：为了保证接口调用的安全性，我们希望设计实现一个接口调用鉴权功能，只有经过认证之后的系统才能调用我们的接口，没有认证过的系统调用我们的接口会被拒绝。让你负责开发。</p><p>这个时候你可能无从下手，主要原因有两点</p><ul><li>需求不明确</li></ul><p>leader 给到的需求过于模糊、笼统，不够具体、细化，<strong>离落地到设计、编码还有一定的距离</strong>。所以我们需要<strong>做需求分析</strong>，通过沟通、挖掘、分析、假设、梳理、搞清楚具体需求是哪些，哪些需要做。</p><ul><li>缺少锻炼</li></ul><p>相比单纯的业务 CRUD 开发，鉴权这个开发任务，要更有难度。鉴权模块是业务无关的，我们完全可以把它开发成一个独立的框架，集成到很多系统中。而通用的模块对工程师的分析能力、设计能力、设计能力要求都比较高，和平常的 CRUD 差异很大。</p><h3 id="对案例进行需求分析" tabindex="-1">对案例进行需求分析 <a class="header-anchor" href="#对案例进行需求分析" aria-hidden="true">#</a></h3><p>实际上，这跟做算法题类似，先从最简单的方案想起，然后再优化。把整个过程分为循序渐进的四轮。</p><h4 id="第一轮基础分析" tabindex="-1">第一轮基础分析 <a class="header-anchor" href="#第一轮基础分析" aria-hidden="true">#</a></h4><p>对于如何做鉴权这样一个问题，最简单的解决方案就是，<strong>通过用户名加密码来做认证</strong>。我们给每个允许访问我们服务的调用方，派发一个应用名（或者叫应用 ID、AppID）和一个对应的密码（或者叫秘钥）。调用方每次调用都带上自己的 AppID 和密码，微服务接受到请求之后判断是否有效。</p><h4 id="第一轮分析优化" tabindex="-1">第一轮分析优化 <a class="header-anchor" href="#第一轮分析优化" aria-hidden="true">#</a></h4><p>不过，这样的验证方式，每次都要明文传输密码。密码很容易被截获，是不安全的。</p><p>我们借助加密算法（比如 SHA），对密码进行加密之后，再传递到微服务端验证，是不是就可以了呢？实际上，这样也是不安全的，因为加密之后的密码及 AppID，照样可以被未认证系统（或者说黑客）截获，未认证系统可以携带这个加密之后的密码以及对应的 AppID，伪装成已认证系统来访问我们的接口。</p><p><strong>提出问题，然后再解决问题，是一个非常好的迭代优化方法。</strong></p><p>对于刚刚这个问题，我们可以借助 OAuth 的验证思路来解决。调用方将请求接口的 URL 跟 AppID、密码拼接在一起，然后进行加密，<strong>生成一个 token</strong>。</p><p>调用方在进行接口请求的的时候，将这个 token 及 AppID，随 URL 一块传递给微服务端。微服务端接收到这些数据之后，根据 AppID 从数据库中取出对应的密码，并通过同样的 token 生成算法，生成另外一个 token。用这个新生成的 token 跟调用方传递过来的 token 对比。如果一致，则允许接口调用请求；否则，就拒绝接口调用请求。</p><p>解决的问题：密码是加密的，不会被直接截获。但是 token 还是会被截获用于访问</p><h4 id="第三轮分析优化" tabindex="-1">第三轮分析优化 <a class="header-anchor" href="#第三轮分析优化" aria-hidden="true">#</a></h4><p>不过，这样的设计仍然存在重放攻击的风险，还是不够安全。</p><p>为了解决这个问题，我们可以进一步优化 token 生成算法，<strong>引入一个随机变量</strong>，让每次接口请求生成的 token 都不一样。我们可以选择时间戳作为随机变量。原来的 token 是对 URL、AppID、密码三者进行加密生成的，现在我们将 URL、AppID、密码、时间戳四者进行加密来生成 token。调用方在进行接口请求的时候，将 token、AppID、时间戳，随 URL 一并传递给微服务端。</p><p>微服务端在收到这些数据之后，会验证当前时间戳跟传递过来的时间戳，是否在一定的时间窗口内（比如一分钟）。如果超过一分钟，则判定 token 过期，拒绝接口请求。如果没有超过一分钟，则说明 token 没有过期，就再通过同样的 token 生成算法，在服务端生成新的 token，与调用方传递过来的 token 比对，看是否一致。</p><p>解决的问题：引入随机变量，可以验证 token 的有效期。但是在有效期内，但是 token 还是会被截获用于访问</p><h4 id="第四轮分析优化" tabindex="-1">第四轮分析优化 <a class="header-anchor" href="#第四轮分析优化" aria-hidden="true">#</a></h4><p>你可能会说，这样还是不够安全啊。未认证系统还是可以在这一分钟的 token 失效窗口内，通过截获请求、重放请求，来调用我们的接口！</p><p>你说得没错。不过，攻与防之间，本来就没有绝对的安全。我们能做的就是，尽量提高攻击的成本。这个方案虽然还有漏洞，但是实现起来足够简单，而且不会过度影响接口本身的性能（比如响应时间）。所以，权衡安全性、开发成本、对系统性能的影响，这个方案算是比较折中、比较合理的了。</p><h3 id="最终确定需求" tabindex="-1">最终确定需求 <a class="header-anchor" href="#最终确定需求" aria-hidden="true">#</a></h3><ul><li>调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。</li><li>微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。</li><li>微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。</li><li>如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进行匹配；如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用。</li></ul><p><strong>从最粗糙、最模糊的需求开始，通过“提出问题 - 解决问题”的方式，最后得到具体的需求。整个过程实际就是明确解决的问题是什么，这种问题的最佳实践方案是什么。</strong></p><h2 id="如何利用面向对象设计和编程开发接口鉴权功能" tabindex="-1">如何利用面向对象设计和编程开发接口鉴权功能 <a class="header-anchor" href="#如何利用面向对象设计和编程开发接口鉴权功能" aria-hidden="true">#</a></h2><p>todo</p>',46);const F=s(r,[["render",function(s,p,o,e,c,r){const F=t("VueJobs"),i=t("nx-tip");return n(),a("div",null,[A,l(F),D,l(i,{type:"warning",text:"领域模型在前端中可以看作是业务单元/模块，提供相关的属性和方法，作为可复用的中间层。"}),C,l(i,{text:"有 domain 了，walletRepo 是什么？原来是看错了！不是 BO，walletRepo 就是VirtualWalletRepository，和数据库打交道"}),y])}]]);export{c as __pageData,F as default};
