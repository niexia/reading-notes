import{_ as s,o as n,c as a,a as l,b as p,d as o,e,r as c}from"./app.06cc9021.js";const t=JSON.parse('{"title":"面向对象是什么","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是面向对象编程","slug":"什么是面向对象编程","link":"#什么是面向对象编程","children":[]},{"level":2,"title":"什么语言是面向对象的语言","slug":"什么语言是面向对象的语言","link":"#什么语言是面向对象的语言","children":[{"level":3,"title":"怎么判断是否是面向对象语言","slug":"怎么判断是否是面向对象语言","link":"#怎么判断是否是面向对象语言","children":[]},{"level":3,"title":"面向对象编程和面向对象编程语言之间的关系","slug":"面向对象编程和面向对象编程语言之间的关系","link":"#面向对象编程和面向对象编程语言之间的关系","children":[]}]},{"level":2,"title":"四大特性封装、抽象、继承、多态是什么解决了什么问题","slug":"四大特性封装、抽象、继承、多态是什么解决了什么问题","link":"#四大特性封装、抽象、继承、多态是什么解决了什么问题","children":[{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"抽象","slug":"抽象","link":"#抽象","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]}]},{"level":2,"title":"面向对象比面向过程好在哪","slug":"面向对象比面向过程好在哪","link":"#面向对象比面向过程好在哪","children":[{"level":3,"title":"什么是面向过程编程与面向过程编程语言","slug":"什么是面向过程编程与面向过程编程语言","link":"#什么是面向过程编程与面向过程编程语言","children":[]},{"level":3,"title":"面向对象有哪些优势","slug":"面向对象有哪些优势","link":"#面向对象有哪些优势","children":[]},{"level":3,"title":"这些代码看似时面向对象实际是面向过程","slug":"这些代码看似时面向对象实际是面向过程","link":"#这些代码看似时面向对象实际是面向过程","children":[]}]},{"level":2,"title":"接口和抽象类","slug":"接口和抽象类","link":"#接口和抽象类","children":[{"level":3,"title":"它们是什么区别在哪里","slug":"它们是什么区别在哪里","link":"#它们是什么区别在哪里","children":[]},{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"有什么区别","slug":"有什么区别","link":"#有什么区别","children":[]},{"level":3,"title":"存在意义解决什么问题","slug":"存在意义解决什么问题","link":"#存在意义解决什么问题","children":[]},{"level":3,"title":"如何决定该用抽象类还是接口","slug":"如何决定该用抽象类还是接口","link":"#如何决定该用抽象类还是接口","children":[]}]},{"level":2,"title":"为什么基于接口而非实现编程","slug":"为什么基于接口而非实现编程","link":"#为什么基于接口而非实现编程","children":[{"level":3,"title":"如何理解原则中的“接口”","slug":"如何理解原则中的-接口","link":"#如何理解原则中的-接口","children":[]},{"level":3,"title":"如何应用到实战中","slug":"如何应用到实战中","link":"#如何应用到实战中","children":[]},{"level":3,"title":"是否需要为每个类都定义接口","slug":"是否需要为每个类都定义接口","link":"#是否需要为每个类都定义接口","children":[]}]},{"level":2,"title":"为什么多用组合少用继承","slug":"为什么多用组合少用继承","link":"#为什么多用组合少用继承","children":[{"level":3,"title":"为什么不推荐继承","slug":"为什么不推荐继承","link":"#为什么不推荐继承","children":[]},{"level":3,"title":"换组合来做有什么优势","slug":"换组合来做有什么优势","link":"#换组合来做有什么优势","children":[]},{"level":3,"title":"如何判断该用组合还是继承","slug":"如何判断该用组合还是继承","link":"#如何判断该用组合还是继承","children":[]}]}],"relativePath":"the-beauty-of-design-patterns/object-oriented/what-is-object-oriented.md"}'),r={name:"the-beauty-of-design-patterns/object-oriented/what-is-object-oriented.md"},y=p("h1",{id:"面向对象是什么",tabindex:"-1"},[o("面向对象是什么 "),p("a",{class:"header-anchor",href:"#面向对象是什么","aria-hidden":"true"},"#")],-1),F=e("",79),D=e("",65),C=e("",45);const A=s(r,[["render",function(s,p,o,e,t,r){const A=c("VueJobs"),i=c("nx-tip");return n(),a("div",null,[y,l(A),F,l(i,{text:"贫血模型？"}),D,l(i,{type:"warning",text:"总结一下，我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识。在定义接口的时候，不要暴露任何实现细节。接口的定义只表明做什么，而不是怎么做。而且，在设计接口的时候，我们要多思考一下，这样的接口设计是否足够通用，是否能够做到在替换具体的接口实现的时候，不需要任何接口定义的改动。"}),C])}]]);export{t as __pageData,A as default};
