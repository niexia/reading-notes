import{_ as e,o as a,c as t,a as n,b as s,d as r,r as l}from"./app.236119f4.js";const i=JSON.parse('{"title":"总结","description":"","frontmatter":{},"headers":[],"relativePath":"the-beauty-of-design-patterns/design-patterns/create-type/summary.md"}'),u={name:"the-beauty-of-design-patterns/design-patterns/create-type/summary.md"},d=s("h1",{id:"总结",tabindex:"-1"},[r("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#")],-1),o=s("p",null,"创建型模式主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。",-1),p=s("p",null,"其中：",-1),c=s("ul",null,[s("li",null,"单例模式用来创建全局唯一的对象。"),s("li",null,"工厂模式用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。"),s("li",null,"建造者模式是用来创建复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的对象。"),s("li",null,"原型模式针对创建成本比较大的对象，利用对已有对象进行复制的方式进行创建，以达到节省创建时间的目的。")],-1);const m=e(u,[["render",function(e,s,r,i,u,m){const h=l("VueJobs");return a(),t("div",null,[d,n(h),o,p,c])}]]);export{i as __pageData,m as default};
